{"ast":null,"code":"var _jsxFileName = \"/Users/emildickson/Documents/Programmering_lokalt/monty-hall-problem/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport monty from \"./images/Monty_hall.png\";\nimport problem from \"./images/Monty_open_door.png\";\nimport \"./App.css\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { Button } from \"@material-ui/core\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Results from \"./components/Results\";\nimport GameTable from \"./components/GameTable\";\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#4F4F4F\"\n    },\n    secondary: {\n      main: \"#CE8147\"\n    }\n  }\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse: null,\n      numberOfSimulations: 1,\n      numberInputError: false,\n      switchDoors: false,\n      loading: false\n    };\n  }\n\n  checkSimulationInput(event) {\n    const newValue = event.target.value; // Checks so that input is a number, non-negative, not zero and not infinity\n\n    if (isNaN(newValue) || newValue < 1 || newValue.includes(\"e\")) {\n      this.setState({\n        numberInputError: true\n      });\n    } else {\n      this.setState({\n        numberOfSimulations: parseInt(newValue),\n        numberInputError: false\n      });\n    }\n  }\n\n  runSimulations() {\n    this.setState({\n      loading: true\n    });\n    fetch(\"http://localhost:9000/results\", {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        numberOfSimulations: this.state.numberOfSimulations,\n        switchDoors: this.state.switchDoors\n      })\n    }).then(res => res.json()).then(results => this.setState({\n      apiResponse: results,\n      loading: false\n    })).catch(err => {\n      this.setState({\n        loading: false\n      });\n      alert(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AppBar, {\n      position: \"sticky\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, \"Monty Hall Simulator\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mainContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"images\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: monty,\n      alt: \"Monty Hall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      src: problem,\n      alt: \"Monty Problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    }, \"Welcome to the\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Monty_Hall_problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 33\n      }\n    }, \"Monty Hall problem\"), \" \", \"simulator!\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    }, \"The premise is a game where you can win either a car or a goat. There is one car and two goats.\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, \"Monty (pictured above) will let you pick a door, open one of the other two doors (but never one with the car) and finally offer you the chance to switch door.\"), /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, \"Define the number of simulations to run and whether to switch doors after having them opened the first time.\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: this.state.switchDoors,\n        onChange: () => this.setState({\n          switchDoors: !this.state.switchDoors\n        }),\n        name: \"switchDoorsCheck\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 37\n        }\n      }),\n      label: \"Switch doors\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      error: this.state.numberInputError,\n      id: \"number-input\",\n      label: \"Number of simulations\",\n      defaultValue: this.state.numberOfSimulations,\n      helperText: this.state.numberInputError ? \"Incorrect entry.\" : null,\n      onChange: e => this.checkSimulationInput(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      disabled: this.state.numberInputError || this.state.loading,\n      onClick: () => this.runSimulations(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }\n    }, this.state.loading ? \"Loading results\" : \"Run simulations\"), /*#__PURE__*/React.createElement(Results, {\n      results: this.state.apiResponse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }), this.state.apiResponse ? /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, \"All games:\") : null, /*#__PURE__*/React.createElement(GameTable, {\n      results: this.state.apiResponse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/emildickson/Documents/Programmering_lokalt/monty-hall-problem/client/src/App.js"],"names":["React","Component","monty","problem","createMuiTheme","ThemeProvider","Button","FormControlLabel","TextField","Checkbox","AppBar","Toolbar","Typography","Results","GameTable","theme","palette","primary","main","secondary","App","constructor","props","state","apiResponse","numberOfSimulations","numberInputError","switchDoors","loading","checkSimulationInput","event","newValue","target","value","isNaN","includes","setState","parseInt","runSimulations","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","results","catch","err","alert","render","e"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport monty from \"./images/Monty_hall.png\";\nimport problem from \"./images/Monty_open_door.png\";\nimport \"./App.css\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { Button } from \"@material-ui/core\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Results from \"./components/Results\";\nimport GameTable from \"./components/GameTable\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#4F4F4F\",\n        },\n        secondary: {\n            main: \"#CE8147\",\n        },\n    },\n});\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            apiResponse: null,\n            numberOfSimulations: 1,\n            numberInputError: false,\n            switchDoors: false,\n            loading: false,\n        };\n    }\n\n    checkSimulationInput(event) {\n        const newValue = event.target.value;\n        // Checks so that input is a number, non-negative, not zero and not infinity\n        if (isNaN(newValue) || newValue < 1 || newValue.includes(\"e\")) {\n            this.setState({\n                numberInputError: true,\n            });\n        } else {\n            this.setState({\n                numberOfSimulations: parseInt(newValue),\n                numberInputError: false,\n            });\n        }\n    }\n\n    runSimulations() {\n        this.setState({ loading: true });\n        fetch(\"http://localhost:9000/results\", {\n            method: \"post\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json; charset=utf-8\",\n            },\n            body: JSON.stringify({\n                numberOfSimulations: this.state.numberOfSimulations,\n                switchDoors: this.state.switchDoors,\n            }),\n        })\n            .then((res) => res.json())\n            .then((results) =>\n                this.setState({ apiResponse: results, loading: false })\n            )\n            .catch((err) => {\n                this.setState({ loading: false });\n                alert(err);\n            });\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n                <div className='App'>\n                    <AppBar position='sticky' color='primary'>\n                        <Toolbar>\n                            <Typography variant='h6'>\n                                Monty Hall Simulator\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                    <div className='mainContainer'>\n                        <div className='images'>\n                            <img src={monty} alt='Monty Hall' />\n                            <img src={problem} alt='Monty Problem' />\n                        </div>\n                        <div className='info'>\n                            <Typography>\n                                Welcome to the{\" \"}\n                                <a href='https://en.wikipedia.org/wiki/Monty_Hall_problem'>\n                                    Monty Hall problem\n                                </a>{\" \"}\n                                simulator!\n                            </Typography>\n                            <Typography>\n                                The premise is a game where you can win either a\n                                car or a goat. There is one car and two goats.\n                            </Typography>\n                            <Typography>\n                                Monty (pictured above) will let you pick a door,\n                                open one of the other two doors (but never one\n                                with the car) and finally offer you the chance\n                                to switch door.\n                            </Typography>\n                            <Typography>\n                                Define the number of simulations to run and\n                                whether to switch doors after having them opened\n                                the first time.\n                            </Typography>\n                        </div>\n                        <div>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={this.state.switchDoors}\n                                        onChange={() =>\n                                            this.setState({\n                                                switchDoors: !this.state\n                                                    .switchDoors,\n                                            })\n                                        }\n                                        name='switchDoorsCheck'\n                                    />\n                                }\n                                label='Switch doors'\n                            />\n                            <TextField\n                                error={this.state.numberInputError}\n                                id='number-input'\n                                label='Number of simulations'\n                                defaultValue={this.state.numberOfSimulations}\n                                helperText={\n                                    this.state.numberInputError\n                                        ? \"Incorrect entry.\"\n                                        : null\n                                }\n                                onChange={(e) => this.checkSimulationInput(e)}\n                            />\n                        </div>\n                        <Button\n                            variant='contained'\n                            color='secondary'\n                            disabled={\n                                this.state.numberInputError ||\n                                this.state.loading\n                            }\n                            onClick={() => this.runSimulations()}\n                        >\n                            {this.state.loading\n                                ? \"Loading results\"\n                                : \"Run simulations\"}\n                        </Button>\n                        <Results results={this.state.apiResponse} />\n                        {this.state.apiResponse ? (\n                            <Typography variant='h6'>All games:</Typography>\n                        ) : null}\n                        <GameTable results={this.state.apiResponse} />\n                    </div>\n                </div>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}